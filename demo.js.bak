//变量，作用域及内存
/**
学习要点：
变量及作用域，内存问题
JavaScript 的变量与其它语言的变量有很大区别，JavaScript变量是松散型的(不强制类型)，本质决定了
它在特定时间用于保存特定值的一个名字而已。由于不存在定义某个变量要保存何种类型，因此变量的值及数据类型可以在脚本的生命
周期内改变。

*/

/**
理解下面一句话
如果赋值的是引用类型的值，则必须在堆内存中为这值分配空间。由于这种值的大小不固定，因此不能把他们
保存在栈内存中。这样，当查询引用类型的变量时，先从栈中读取内存地址，然后再通过地址找到堆中的值
，对于这种，我们把它叫做按引用访问、
*/

/**2.动态属性:区别下面

var box = new Object();
box.name = 'Lee';
alert(box.name);

var box1 = 'Lee';
box.age = 27;
alert(box1.age);
得出结论：定义基本类型值和引用类型值的方式是相似的：创建一个变量后，对该变量赋值类型不同，对于不同类型的值执行的操作大相径庭。
*/

/**
复制变量值：
在变量复制方面，基本类型和引用类型也有所不同。基本类型复杂的是值本身，而引用类型复杂的是地址
var box = 'Lee'
var box2 = box;\
得出结论值与引用是分开来存储的，
两个引用操作的是同一个堆内存的值
*/

/**
4.ECMAScript中所有函数的参数都是安值传递的，简单说参数不会安引用传递。
分析下面代码：
function box(data){

	alert(data);
}

var num = 50;
 box(num);
 得出结论：我们传递是num data接受到的是50
 区分下面：
 function box(obj) { 按值传递，传递的参数是引用类型
obj.name = 'Lee';
}
var p = new Object();
box(p);
alert(p.name);
所以按引用传递和传递引用类型是两个不同的概念。
*/

/**
5.检测类型：
要检测一个变量的类型，我们可以通过typeof运算符来判别。
var a = "hello";
alert(typeof a);
虽然typeof运算符在检查基本数据类型的时候非常好用，但检测引用类型的时候，它就不好用了，通常我们并不想知道它是不是对象，而是想、
知道他到底是什么类型的对象。

var box = [1,2,3];
alert(box instanceof Array);

我们可以使用instanceof运算符来查看

*/

/**
6.执行环境及作用域
执行环境是Javascript中最为重要的一个概念。执行环境定义了变量或函数有权访问的其它数据，决定了他们的各自行为。
在Web浏览器中，全局执行环境被认为是window对象，因此所有全局变量和函数都是作为window对象的属性和方法来创建的。

细节分析：
当执行环境中的所以代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数也会随之销毁，如果是
全局环境下，需要程序执行完毕，或者网页关闭才会销毁。
*/
var  a = 'blue';
function seta(){
var a = 'red';
alert(a);
}

seta();
alert(a);
